(()=>{"use strict";var __webpack_modules__={924:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"version\": () => (/* binding */ version),\n/* harmony export */   \"permutation\": () => (/* binding */ permutation),\n/* harmony export */   \"combination\": () => (/* binding */ combination),\n/* harmony export */   \"factorial\": () => (/* binding */ factorial),\n/* harmony export */   \"factoradic\": () => (/* binding */ factoradic),\n/* harmony export */   \"combinadic\": () => (/* binding */ combinadic),\n/* harmony export */   \"randomInteger\": () => (/* binding */ randomInteger),\n/* harmony export */   \"Permutation\": () => (/* binding */ Permutation),\n/* harmony export */   \"Combination\": () => (/* binding */ Combination),\n/* harmony export */   \"BaseN\": () => (/* binding */ BaseN),\n/* harmony export */   \"PowerSet\": () => (/* binding */ PowerSet),\n/* harmony export */   \"CartesianProduct\": () => (/* binding */ CartesianProduct)\n/* harmony export */ });\n/**\n * combinatorics.js\n *\n *  Licensed under the MIT license.\n *  http://www.opensource.org/licenses/mit-license.php\n *\n *  @author: Dan Kogai <dankogai+github@gmail.com>\n *\n *  References:\n *  @link: http://www.ruby-doc.org/core-2.0/Array.html#method-i-combination\n *  @link: http://www.ruby-doc.org/core-2.0/Array.html#method-i-permutation\n *  @link: http://en.wikipedia.org/wiki/Factorial_number_system\n */\nconst version = '1.5.3';\nconst _BI = typeof BigInt == 'function' ? BigInt : Number;\n/**\n * crops BigInt\n */\nconst _crop = (n) => n <= Number.MAX_SAFE_INTEGER ? Number(n) : _BI(n);\n/**\n * calculates `P(n, k)`.\n *\n * @link https://en.wikipedia.org/wiki/Permutation\n */\nfunction permutation(n, k) {\n    if (n < 0)\n        throw new RangeError(`negative n is not acceptable`);\n    if (k < 0)\n        throw new RangeError(`negative k is not acceptable`);\n    if (0 == k)\n        return 1;\n    if (n < k)\n        return 0;\n    [n, k] = [_BI(n), _BI(k)];\n    let p = _BI(1);\n    while (k--)\n        p *= n--;\n    return _crop(p);\n}\n/**\n * calculates `C(n, k)`.\n *\n * @link https://en.wikipedia.org/wiki/Combination\n */\nfunction combination(n, k) {\n    if (0 == k)\n        return 1;\n    if (n == k)\n        return 1;\n    if (n < k)\n        return 0;\n    const P = permutation;\n    const c = _BI(P(n, k)) / _BI(P(k, k));\n    return _crop(c);\n}\n/**\n * calculates `n!` === `P(n, n)`.\n *\n * @link https://en.wikipedia.org/wiki/Factorial\n */\nfunction factorial(n) {\n    return permutation(n, n);\n}\n/**\n * returns the factoradic representation of `n`, least significant order.\n *\n * @link https://en.wikipedia.org/wiki/Factorial_number_system\n * @param {number} l the number of digits\n */\nfunction factoradic(n, l = 0) {\n    if (n < 0)\n        return undefined;\n    let [bn, bf] = [_BI(n), _BI(1)];\n    if (!l) {\n        for (l = 1; bf < bn; bf *= _BI(++l))\n            ;\n        if (bn < bf)\n            bf /= _BI(l--);\n    }\n    else {\n        bf = _BI(factorial(l));\n    }\n    let digits = [0];\n    for (; l; bf /= _BI(l--)) {\n        digits[l] = Math.floor(Number(bn / bf));\n        bn %= bf;\n    }\n    return digits;\n}\n/**\n * `combinadic(n, k)` returns a function\n * that takes `m` as an argument and\n * returns the combinadics representation of `m` for `n C k`.\n *\n * @link https://en.wikipedia.org/wiki/Combinatorial_number_system\n */\nfunction combinadic(n, k) {\n    const count = combination(n, k);\n    return (m) => {\n        if (m < 0 || count <= m)\n            return undefined;\n        let digits = [];\n        let [a, b] = [n, k];\n        let x = _BI(count) - _BI(1) - _BI(m);\n        for (let i = 0; i < k; i++) {\n            a--;\n            while (x < combination(a, b))\n                a--;\n            digits.push(n - 1 - a);\n            x -= _BI(combination(a, b));\n            b--;\n        }\n        return digits;\n    };\n}\n/**\n *\n */\nconst _crypto = typeof crypto !== 'undefined' ? crypto : {};\nconst _randomBytes = typeof _crypto['randomBytes'] === 'function'\n    ? (len) => Uint8Array.from(_crypto['randomBytes'](len))\n    : typeof _crypto['getRandomValues'] === 'function'\n        ? (len) => _crypto['getRandomValues'](new Uint8Array(len))\n        : (len) => Uint8Array.from(Array(len), () => Math.random() * 256);\n/**\n * returns random integer `n` where `min` <= `n` < `max`:\n *\n * if the argument is `BigInt` the result is also `BigInt`.\n *\n * @param {anyint} min\n * @param {anyint} max\n */\nfunction randomInteger(min = 0, max = Math.pow(2, 53)) {\n    let ctor = min.constructor;\n    if (arguments.length === 0) {\n        return Math.floor(Math.random() * ctor(max));\n    }\n    if (arguments.length == 1) {\n        [min, max] = [ctor(0), min];\n    }\n    if (typeof min == 'number') { // number\n        [min, max] = [Math.ceil(Number(min)), Math.ceil(Number(max))];\n        return Math.floor(Math.random() * (max - min)) + min;\n    }\n    const mag = ctor(max) - ctor(min);\n    const len = mag.toString(16).length;\n    const u8s = _randomBytes(len);\n    const rnd = u8s.reduce((a, v) => ((a << ctor(8)) + ctor(v)), ctor(0));\n    return ((ctor(rnd) * mag) >> ctor(len * 8)) + ctor(min);\n}\n;\n/**\n * Base Class of `js-combinatorics`\n */\nclass _CBase {\n    /**\n     * does `new`\n     * @param args\n     */\n    static of(...args) {\n        return new (Function.prototype.bind.apply(this, [null].concat(args)));\n    }\n    /**\n     * Same as `of` but takes a single array `arg`\n     *\n     * cf. https://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n     */\n    static from(arg) {\n        return new (Function.prototype.bind.apply(this, [null].concat(arg)));\n    }\n    /**\n     * Common iterator\n     */\n    [Symbol.iterator]() {\n        return function* (it, len) {\n            for (let i = 0; i < len; i++)\n                yield it.nth(i);\n        }(this, this.length);\n    }\n    /**\n     * returns `[...this]`.\n     */\n    toArray() {\n        return [...this];\n    }\n    /**\n     * tells wether you need `BigInt` to access all elements.\n     */\n    get isBig() {\n        return Number.MAX_SAFE_INTEGER < this.length;\n    }\n    /**\n     * tells wether it is safe to work on this instance.\n     *\n     * * always `true` unless your platform does not support `BigInt`.\n     * * if not, `true` iff `.isBig` is `false`.\n     */\n    get isSafe() {\n        return typeof BigInt !== 'undefined' || !this.isBig;\n    }\n    /**\n    * check n for nth\n    */\n    _check(n) {\n        if (n < 0) {\n            if (this.length < -n)\n                return undefined;\n            return _crop(_BI(this.length) + _BI(n));\n        }\n        if (this.length <= n)\n            return undefined;\n        return n;\n    }\n    /**\n     * get the `n`th element of the iterator.\n     * negative `n` goes backwards\n     */\n    nth(n) { return []; }\n    ;\n    /**\n     * pick random element\n     */\n    sample() {\n        return this.nth(randomInteger(this.length));\n    }\n    /**\n     * an infinite steam of random elements\n     */\n    samples() {\n        return function* (it) {\n            while (true)\n                yield it.sample();\n        }(this);\n    }\n}\n/**\n * Permutation\n */\nclass Permutation extends _CBase {\n    constructor(seed, size = 0) {\n        super();\n        this.seed = [...seed];\n        this.size = 0 < size ? size : this.seed.length;\n        this.length = permutation(this.seed.length, this.size);\n        Object.freeze(this);\n    }\n    nth(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        const offset = this.seed.length - this.size;\n        const skip = factorial(offset);\n        let digits = factoradic(_BI(n) * _BI(skip), this.seed.length);\n        let source = this.seed.slice();\n        let result = [];\n        for (let i = this.seed.length - 1; offset <= i; i--) {\n            result.push(source.splice(digits[i], 1)[0]);\n        }\n        return result;\n    }\n}\n/**\n * Combination\n */\nclass Combination extends _CBase {\n    constructor(seed, size = 0) {\n        super();\n        this.seed = [...seed];\n        this.size = 0 < size ? size : this.seed.length;\n        this.size = size;\n        this.length = combination(this.seed.length, this.size);\n        this.comb = combinadic(this.seed.length, this.size);\n        Object.freeze(this);\n    }\n    /**\n     * returns an iterator which is more efficient\n     * than the default iterator that uses .nth\n     *\n     * @link https://en.wikipedia.org/wiki/Combinatorial_number_system#Applications\n     */\n    bitwiseIterator() {\n        // console.log('overriding _CBase');\n        const ctor = this.length.constructor;\n        const [zero, one, two] = [ctor(0), ctor(1), ctor(2)];\n        const inc = (x) => {\n            const u = x & -x;\n            const v = u + x;\n            return v + (((v ^ x) / u) >> two);\n        };\n        let x = (one << ctor(this.size)) - one; // 0b11...1\n        return function* (it, len) {\n            for (let i = 0; i < len; i++, x = inc(x)) {\n                let result = [];\n                for (let y = x, j = 0; zero < y; y >>= one, j++) {\n                    if (y & one)\n                        result.push(it.seed[j]);\n                }\n                // console.log(`x = ${x}`);\n                yield result;\n            }\n        }(this, this.length);\n    }\n    nth(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let result = [];\n        for (let i of this.comb(n)) {\n            result.push(this.seed[i]);\n        }\n        return result;\n    }\n}\n/**\n * Base N\n */\nclass BaseN extends _CBase {\n    constructor(seed, size = 1) {\n        super();\n        this.seed = [...seed];\n        this.size = size;\n        let base = this.seed.length;\n        this.base = base;\n        let length = size < 1 ? 0\n            : Array(size).fill(_BI(base)).reduce((a, v) => a * v);\n        this.length = _crop(length);\n        Object.freeze(this);\n    }\n    nth(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let bn = _BI(n);\n        const bb = _BI(this.base);\n        let result = [];\n        for (let i = 0; i < this.size; i++) {\n            let bd = bn % bb;\n            result.push(this.seed[Number(bd)]);\n            bn -= bd;\n            bn /= bb;\n        }\n        return result;\n    }\n}\n/**\n * Power Set\n */\nclass PowerSet extends _CBase {\n    constructor(seed) {\n        super();\n        this.seed = [...seed];\n        const length = _BI(1) << _BI(this.seed.length);\n        this.length = _crop(length);\n        Object.freeze(this);\n    }\n    nth(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let bn = _BI(n);\n        let result = [];\n        for (let bi = _BI(0); bn; bn >>= _BI(1), bi++)\n            if (bn & _BI(1))\n                result.push(this.seed[Number(bi)]);\n        return result;\n    }\n}\n/**\n * Cartesian Product\n */\nclass CartesianProduct extends _CBase {\n    constructor(...args) {\n        super();\n        this.seed = args.map(v => [...v]);\n        this.size = this.seed.length;\n        const length = this.seed.reduce((a, v) => a * _BI(v.length), _BI(1));\n        this.length = _crop(length);\n        Object.freeze(this);\n    }\n    nth(n) {\n        n = this._check(n);\n        if (n === undefined)\n            return undefined;\n        let bn = _BI(n);\n        let result = [];\n        for (let i = 0; i < this.size; i++) {\n            const base = this.seed[i].length;\n            const bb = _BI(base);\n            const bd = bn % bb;\n            result.push(this.seed[i][Number(bd)]);\n            bn -= bd;\n            bn /= bb;\n        }\n        return result;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///924\n")},607:(__unused_webpack_module,exports,__webpack_require__)=>{eval('var __webpack_unused_export__;\n\n__webpack_unused_export__ = ({ value: true });\nconst solver_1 = __webpack_require__(168);\ndocument.getElementById("card1").value = Math.floor(1 + Math.random() * 13).toString();\ndocument.getElementById("card2").value = Math.floor(1 + Math.random() * 13).toString();\ndocument.getElementById("card3").value = Math.floor(1 + Math.random() * 13).toString();\ndocument.getElementById("card4").value = Math.floor(1 + Math.random() * 13).toString();\nfor (const elem of document.getElementsByClassName("card-picker")) {\n    updateImage(elem);\n    elem.addEventListener("change", event => updateImage(event.target));\n}\ndocument.getElementById("solve").addEventListener("click", solve);\nfunction solve() {\n    const cards = [];\n    for (let i = 1; i <= 4; i++) {\n        const value = Number(document.getElementById(`card${i}`).value);\n        if (value >= 1 && value <= 13) {\n            cards.push(value);\n        }\n        else {\n            alert(`Card ${i} is invalid`);\n            return;\n        }\n    }\n    const solutionsDiv = document.getElementById("solutions");\n    while (solutionsDiv.lastElementChild) {\n        solutionsDiv.removeChild(solutionsDiv.lastElementChild);\n    }\n    const solutions = solver_1.Solver.solve(cards);\n    if (solutions.length !== 0) {\n        const solutionElements = solver_1.Solver.print(solutions).map(output => {\n            const solutionElement = document.createElement("pre");\n            solutionElement.classList.add("text-center", "col-12", "col-sm-4", "col-md-3", "col-lg-2");\n            solutionElement.innerText = output;\n            return solutionElement;\n        });\n        solutionsDiv.append(...solutionElements);\n    }\n    else {\n        const noSolutionsElement = document.createElement("pre");\n        noSolutionsElement.innerText = "No solutions";\n        solutionsDiv.appendChild(noSolutionsElement);\n    }\n}\nfunction updateImage(elem) {\n    var _a, _b;\n    const imageElem = (_b = (_a = elem.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.getElementsByClassName("card-image")[0].getElementsByTagName("img")[0];\n    const face = ["Clubs", "Diamonds", "Hearts", "Spades"][Math.floor(Math.random() * 4)];\n    imageElem.src = `images/light/${elem.value}${face[0]}.svg`;\n    imageElem.alt = `${elem.value} of ${face}`;\n    imageElem.title = `${elem.value} of ${face}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA3LmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDZCQUE2QyxFQUFFLGFBQWEsQ0FBQztBQUM3RCxpQkFBaUIsbUJBQU8sQ0FBQyxHQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1Qiw0REFBNEQsRUFBRTtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixHQUFHO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLFdBQVcsRUFBRSxRQUFRO0FBQ3pELHVCQUF1QixZQUFZLEtBQUssS0FBSztBQUM3Qyx5QkFBeUIsWUFBWSxLQUFLLEtBQUs7QUFDL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yNC1jYXJkLWdhbWUtc29sdmVyLy4vc3JjL2luZGV4LnRzP2U5NGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzb2x2ZXJfMSA9IHJlcXVpcmUoXCIuL3NvbHZlclwiKTtcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FyZDFcIikudmFsdWUgPSBNYXRoLmZsb29yKDEgKyBNYXRoLnJhbmRvbSgpICogMTMpLnRvU3RyaW5nKCk7XG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhcmQyXCIpLnZhbHVlID0gTWF0aC5mbG9vcigxICsgTWF0aC5yYW5kb20oKSAqIDEzKS50b1N0cmluZygpO1xuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYXJkM1wiKS52YWx1ZSA9IE1hdGguZmxvb3IoMSArIE1hdGgucmFuZG9tKCkgKiAxMykudG9TdHJpbmcoKTtcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FyZDRcIikudmFsdWUgPSBNYXRoLmZsb29yKDEgKyBNYXRoLnJhbmRvbSgpICogMTMpLnRvU3RyaW5nKCk7XG5mb3IgKGNvbnN0IGVsZW0gb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImNhcmQtcGlja2VyXCIpKSB7XG4gICAgdXBkYXRlSW1hZ2UoZWxlbSk7XG4gICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGV2ZW50ID0+IHVwZGF0ZUltYWdlKGV2ZW50LnRhcmdldCkpO1xufVxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzb2x2ZVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgc29sdmUpO1xuZnVuY3Rpb24gc29sdmUoKSB7XG4gICAgY29uc3QgY2FyZHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSA0OyBpKyspIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBOdW1iZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGNhcmQke2l9YCkudmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSAxMykge1xuICAgICAgICAgICAgY2FyZHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhbGVydChgQ2FyZCAke2l9IGlzIGludmFsaWRgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBzb2x1dGlvbnNEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNvbHV0aW9uc1wiKTtcbiAgICB3aGlsZSAoc29sdXRpb25zRGl2Lmxhc3RFbGVtZW50Q2hpbGQpIHtcbiAgICAgICAgc29sdXRpb25zRGl2LnJlbW92ZUNoaWxkKHNvbHV0aW9uc0Rpdi5sYXN0RWxlbWVudENoaWxkKTtcbiAgICB9XG4gICAgY29uc3Qgc29sdXRpb25zID0gc29sdmVyXzEuU29sdmVyLnNvbHZlKGNhcmRzKTtcbiAgICBpZiAoc29sdXRpb25zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zdCBzb2x1dGlvbkVsZW1lbnRzID0gc29sdmVyXzEuU29sdmVyLnByaW50KHNvbHV0aW9ucykubWFwKG91dHB1dCA9PiB7XG4gICAgICAgICAgICBjb25zdCBzb2x1dGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicHJlXCIpO1xuICAgICAgICAgICAgc29sdXRpb25FbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0ZXh0LWNlbnRlclwiLCBcImNvbC0xMlwiLCBcImNvbC1zbS00XCIsIFwiY29sLW1kLTNcIiwgXCJjb2wtbGctMlwiKTtcbiAgICAgICAgICAgIHNvbHV0aW9uRWxlbWVudC5pbm5lclRleHQgPSBvdXRwdXQ7XG4gICAgICAgICAgICByZXR1cm4gc29sdXRpb25FbGVtZW50O1xuICAgICAgICB9KTtcbiAgICAgICAgc29sdXRpb25zRGl2LmFwcGVuZCguLi5zb2x1dGlvbkVsZW1lbnRzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG5vU29sdXRpb25zRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwcmVcIik7XG4gICAgICAgIG5vU29sdXRpb25zRWxlbWVudC5pbm5lclRleHQgPSBcIk5vIHNvbHV0aW9uc1wiO1xuICAgICAgICBzb2x1dGlvbnNEaXYuYXBwZW5kQ2hpbGQobm9Tb2x1dGlvbnNFbGVtZW50KTtcbiAgICB9XG59XG5mdW5jdGlvbiB1cGRhdGVJbWFnZShlbGVtKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBpbWFnZUVsZW0gPSAoX2IgPSAoX2EgPSBlbGVtLnBhcmVudEVsZW1lbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXJlbnRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImNhcmQtaW1hZ2VcIilbMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbWdcIilbMF07XG4gICAgY29uc3QgZmFjZSA9IFtcIkNsdWJzXCIsIFwiRGlhbW9uZHNcIiwgXCJIZWFydHNcIiwgXCJTcGFkZXNcIl1bTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNCldO1xuICAgIGltYWdlRWxlbS5zcmMgPSBgaW1hZ2VzL2xpZ2h0LyR7ZWxlbS52YWx1ZX0ke2ZhY2VbMF19LnN2Z2A7XG4gICAgaW1hZ2VFbGVtLmFsdCA9IGAke2VsZW0udmFsdWV9IG9mICR7ZmFjZX1gO1xuICAgIGltYWdlRWxlbS50aXRsZSA9IGAke2VsZW0udmFsdWV9IG9mICR7ZmFjZX1gO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///607\n')},968:(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Log = exports.Exponent = exports.Divide = exports.Multiply = exports.Subtract = exports.Add = void 0;\nexports.Add = {\n    operate(a, b) {\n        return a + b;\n    },\n    toString(a, b) {\n        return `${a} + ${b}`;\n    }\n};\nexports.Subtract = {\n    operate(a, b) {\n        return a - b;\n    },\n    toString(a, b) {\n        return `${a} - ${b}`;\n    }\n};\nexports.Multiply = {\n    operate(a, b) {\n        return a * b;\n    },\n    toString(a, b) {\n        return `${a} * ${b}`;\n    }\n};\nexports.Divide = {\n    operate(a, b) {\n        return a / b;\n    },\n    toString(a, b) {\n        return `${a} / ${b}`;\n    }\n};\nexports.Exponent = {\n    operate(a, b) {\n        return Math.pow(a, b);\n    },\n    toString(a, b) {\n        return `${a} ^ ${b}`;\n    }\n};\nexports.Log = {\n    operate(a, b) {\n        return Math.log(b) / Math.log(a);\n    },\n    toString(a, b) {\n        return `log_${a}(${b})`;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTY4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFdBQVcsR0FBRyxnQkFBZ0IsR0FBRyxjQUFjLEdBQUcsZ0JBQWdCLEdBQUcsZ0JBQWdCLEdBQUcsV0FBVztBQUNuRyxXQUFXO0FBQ1g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGtCQUFrQixHQUFHLElBQUksRUFBRTtBQUMzQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxrQkFBa0IsR0FBRyxJQUFJLEVBQUU7QUFDM0I7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esa0JBQWtCLEdBQUcsSUFBSSxFQUFFO0FBQzNCO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGtCQUFrQixHQUFHLElBQUksRUFBRTtBQUMzQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxrQkFBa0IsR0FBRyxJQUFJLEVBQUU7QUFDM0I7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0FBQzdCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yNC1jYXJkLWdhbWUtc29sdmVyLy4vc3JjL29wZXJhdGlvbi50cz85ODYzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Mb2cgPSBleHBvcnRzLkV4cG9uZW50ID0gZXhwb3J0cy5EaXZpZGUgPSBleHBvcnRzLk11bHRpcGx5ID0gZXhwb3J0cy5TdWJ0cmFjdCA9IGV4cG9ydHMuQWRkID0gdm9pZCAwO1xuZXhwb3J0cy5BZGQgPSB7XG4gICAgb3BlcmF0ZShhLCBiKSB7XG4gICAgICAgIHJldHVybiBhICsgYjtcbiAgICB9LFxuICAgIHRvU3RyaW5nKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGAke2F9ICsgJHtifWA7XG4gICAgfVxufTtcbmV4cG9ydHMuU3VidHJhY3QgPSB7XG4gICAgb3BlcmF0ZShhLCBiKSB7XG4gICAgICAgIHJldHVybiBhIC0gYjtcbiAgICB9LFxuICAgIHRvU3RyaW5nKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGAke2F9IC0gJHtifWA7XG4gICAgfVxufTtcbmV4cG9ydHMuTXVsdGlwbHkgPSB7XG4gICAgb3BlcmF0ZShhLCBiKSB7XG4gICAgICAgIHJldHVybiBhICogYjtcbiAgICB9LFxuICAgIHRvU3RyaW5nKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGAke2F9ICogJHtifWA7XG4gICAgfVxufTtcbmV4cG9ydHMuRGl2aWRlID0ge1xuICAgIG9wZXJhdGUoYSwgYikge1xuICAgICAgICByZXR1cm4gYSAvIGI7XG4gICAgfSxcbiAgICB0b1N0cmluZyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBgJHthfSAvICR7Yn1gO1xuICAgIH1cbn07XG5leHBvcnRzLkV4cG9uZW50ID0ge1xuICAgIG9wZXJhdGUoYSwgYikge1xuICAgICAgICByZXR1cm4gTWF0aC5wb3coYSwgYik7XG4gICAgfSxcbiAgICB0b1N0cmluZyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBgJHthfSBeICR7Yn1gO1xuICAgIH1cbn07XG5leHBvcnRzLkxvZyA9IHtcbiAgICBvcGVyYXRlKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubG9nKGIpIC8gTWF0aC5sb2coYSk7XG4gICAgfSxcbiAgICB0b1N0cmluZyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBgbG9nXyR7YX0oJHtifSlgO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///968\n')},168:function(__unused_webpack_module,exports,__webpack_require__){eval('\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, "default", { enumerable: true, value: v });\n}) : function(o, v) {\n    o["default"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Solver = void 0;\nconst js_combinatorics_1 = __webpack_require__(924);\nconst operations = __importStar(__webpack_require__(968));\nclass Solver {\n    static solve(hand) {\n        const solutions = [];\n        const hands = [];\n        for (let i = 0; i < Math.pow(2, hand.filter(card => card > 10).length); i++) {\n            const newHand = [];\n            let face = 1;\n            for (const card of hand) {\n                if (card > 10) {\n                    if ((i / face) % 2 === 0) {\n                        newHand.push(card);\n                    }\n                    else {\n                        newHand.push(10);\n                    }\n                    face *= 2;\n                }\n                else {\n                    newHand.push(card);\n                }\n            }\n            hands.push(newHand);\n        }\n        for (const hand of hands) {\n            for (const solution of new js_combinatorics_1.Permutation(hand)) {\n                for (const operations of new js_combinatorics_1.BaseN(Solver.ops, 3)) {\n                    // (a b) (c d)\n                    let left = operations[0].operate(solution[0], solution[1]);\n                    let right = operations[1].operate(solution[2], solution[3]);\n                    let answer = operations[2].operate(left, right);\n                    if (answer === 24) {\n                        solutions.push({\n                            operations,\n                            parentheses: 0,\n                            solution,\n                        });\n                    }\n                    // ((a b) c) d\n                    left = operations[0].operate(solution[0], solution[1]);\n                    right = operations[1].operate(left, solution[2]);\n                    answer = operations[2].operate(right, solution[3]);\n                    if (answer === 24) {\n                        solutions.push({\n                            operations,\n                            parentheses: 1,\n                            solution,\n                        });\n                    }\n                    // (a (b c)) d\n                    left = operations[0].operate(solution[1], solution[2]);\n                    right = operations[1].operate(solution[0], left);\n                    answer = operations[2].operate(right, solution[3]);\n                    if (answer === 24) {\n                        solutions.push({\n                            operations,\n                            parentheses: 2,\n                            solution,\n                        });\n                    }\n                    // a ((b c) d)\n                    left = operations[0].operate(solution[1], solution[2]);\n                    right = operations[1].operate(left, solution[3]);\n                    answer = operations[2].operate(solution[0], right);\n                    if (answer == 24) {\n                        solutions.push({\n                            operations,\n                            parentheses: 3,\n                            solution,\n                        });\n                    }\n                    // a (b (c d))\n                    left = operations[0].operate(solution[2], solution[3]);\n                    right = operations[1].operate(solution[1], left);\n                    answer = operations[2].operate(solution[0], right);\n                    if (answer === 24) {\n                        solutions.push({\n                            operations,\n                            parentheses: 4,\n                            solution,\n                        });\n                    }\n                }\n            }\n        }\n        return solutions;\n    }\n    static print(solutions) {\n        const outputs = [];\n        for (const { operations, parentheses, solution } of solutions) {\n            if (parentheses === 0) {\n                // (a b) (c d)\n                const left = `(${operations[0].toString(solution[0], solution[1])})`;\n                const right = `(${operations[1].toString(solution[2], solution[3])})`;\n                outputs.push(operations[2].toString(left, right));\n            }\n            else if (parentheses === 1) {\n                // ((a b) c) d\n                const left = `(${operations[0].toString(solution[0], solution[1])})`;\n                const right = `(${operations[1].toString(left, solution[2])})`;\n                outputs.push(operations[2].toString(right, solution[3]));\n            }\n            else if (parentheses === 2) {\n                // (a (b c)) d\n                const left = `(${operations[0].toString(solution[1], solution[2])})`;\n                const right = `(${operations[1].toString(solution[0], left)})`;\n                outputs.push(operations[2].toString(right, solution[3]));\n            }\n            else if (parentheses === 3) {\n                // a ((b c) d)\n                const left = `(${operations[0].toString(solution[1], solution[2])})`;\n                const right = `(${operations[1].toString(left, solution[3])})`;\n                outputs.push(operations[2].toString(solution[0], right));\n            }\n            else if (parentheses === 4) {\n                // a (b (c d))\n                const left = `(${operations[0].toString(solution[2], solution[3])})`;\n                const right = `(${operations[1].toString(solution[1], left)})`;\n                outputs.push(operations[2].toString(solution[0], right));\n            }\n        }\n        return outputs;\n    }\n}\nexports.Solver = Solver;\nSolver.ops = [\n    operations.Add, operations.Subtract, operations.Multiply,\n    operations.Divide, operations.Exponent, operations.Log\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///168\n')}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var C=__webpack_module_cache__[g]={exports:{}};return __webpack_modules__[g].call(C.exports,C,C.exports,__webpack_require__),C.exports}__webpack_require__.d=(g,I)=>{for(var C in I)__webpack_require__.o(I,C)&&!__webpack_require__.o(g,C)&&Object.defineProperty(g,C,{enumerable:!0,get:I[C]})},__webpack_require__.o=(g,I)=>Object.prototype.hasOwnProperty.call(g,I),__webpack_require__.r=g=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(607)})();